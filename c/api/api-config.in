#!/bin/sh
# API script designed to allow easy command line access to API configuration
# parameters.

API_MAJOR_VERSION="@API_MAJOR_VERSION@"
API_DOTTED_VERSION="@API_DOTTED_VERSION@"

prefix="@prefix@"
exec_prefix="@exec_prefix@"
bindir="@bindir@"
libdir="@libdir@"
datarootdir="@datadir@"
datadir="@datadir@"
installbuilddir="@installbuilddir@"
includedir="@includedir@"

CC="@CC@"
CPP="@CPP@"
SHELL="@SHELL@"
CPPFLAGS="@EXTRA_CPPFLAGS@"
CFLAGS="@EXTRA_CFLAGS@"
LDFLAGS="@EXTRA_LDFLAGS@"
LIBS="@EXTRA_LIBS@"
EXTRA_INCLUDES="@EXTRA_INCLUDES@"
SHLIBPATH_VAR="@shlibpath_var@"
API_SOURCE_DIR="@api_srcdir@"
API_BUILD_DIR="@api_builddir@"
API_SO_EXT="@so_ext@"
API_LIB_TARGET="@export_lib_target@"
API_LIBNAME="@API_LIBNAME@"

# NOTE: the following line is modified during 'make install': alter with care!
location=@API_CONFIG_LOCATION@

show_usage()
{
    cat << EOF
Usage: api-$API_MAJOR_VERSION-config [OPTION]

Known values for OPTION are:
  --prefix[=DIR]    change prefix to DIR
  --bindir          print location where binaries are installed
  --includedir      print location where headers are installed
  --cc              print C compiler name
  --cpp             print C preprocessor name and any required options
  --cflags          print C compiler flags
  --cppflags        print C preprocessor flags
  --includes        print include information
  --ldflags         print linker flags
  --libs            print additional libraries to link against
  --srcdir          print API source directory
  --installbuilddir print API build helper directory
  --link-ld         print link switch(es) for linking to API
  --link-libtool    print the libtool inputs for linking to API
  --shlib-path-var  print the name of the shared library path env var
  --api-la-file     print the path to the .la file, if available
  --api-so-ext      print the extensions of shared objects on this platform
  --api-lib-target  print the libtool target information
  --api-libtool     print the path to API's libtool
  --version         print the API's version as a dotted triple
  --help            print this help

When linking with libtool, an application should do something like:
  API_LIBS="\`api-$API_MAJOR_VERSION-config --link-libtool --libs\`"
or when linking directly:
  API_LIBS="\`api-$API_MAJOR_VERSION-config --link-ld --libs\`"

An application should use the results of --cflags, --cppflags, --includes,
and --ldflags in their build process.
EOF
}

if test $# -eq 0; then
    show_usage
    exit 1
fi

if test "$location" = "installed"; then
    LA_FILE="$libdir/lib${API_LIBNAME}.la"
else
    LA_FILE="$API_BUILD_DIR/lib${API_LIBNAME}.la"
fi

flags=""

while test $# -gt 0; do
    # Normalize the prefix.
    case "$1" in
    -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
    *) optarg= ;;
    esac

    case "$1" in
    # It is possible for the user to override our prefix.
    --prefix=*)
    prefix=$optarg
    ;;
    --prefix)
    echo $prefix
    exit 0
    ;;
    --bindir)
    echo $bindir
    exit 0
    ;;
    --includedir)
    if test "$location" = "installed"; then
        flags="$includedir"
    elif test "$location" = "source"; then
        flags="$API_SOURCE_DIR/include"
    else
        # this is for VPATH builds
        flags="$API_BUILD_DIR/include $API_SOURCE_DIR/include"
    fi
    echo $flags
    exit 0
    ;;
    --cc)
    echo $CC
    exit 0
    ;;
    --cpp)
    echo $CPP
    exit 0
    ;;
    --cflags)
    flags="$flags $CFLAGS"
    ;;
    --cppflags)
    flags="$flags $CPPFLAGS"
    ;;
    --libs)
    flags="$flags $LIBS"
    ;;
    --ldflags)
    flags="$flags $LDFLAGS"
    ;;
    --includes)
    if test "$location" = "installed"; then
        flags="$flags -I$includedir $EXTRA_INCLUDES"
    elif test "$location" = "source"; then
        flags="$flags -I$API_SOURCE_DIR/include $EXTRA_INCLUDES"
    else
        # this is for VPATH builds
        flags="$flags -I$API_BUILD_DIR/include -I$API_SOURCE_DIR/include $EXTRA_INCLUDES"
    fi
    ;;
    --srcdir)
    echo $API_SOURCE_DIR
    exit 0
    ;;
    --installbuilddir)
    if test "$location" = "installed"; then
        echo "${installbuilddir}"
    elif test "$location" = "source"; then
        echo "$API_SOURCE_DIR/build"
    else
        # this is for VPATH builds
        echo "$API_BUILD_DIR/build"
    fi
    exit 0
    ;;
    --version)
    echo $API_DOTTED_VERSION
    exit 0
    ;;
    --link-ld)
    if test "$location" = "installed"; then
        ### avoid using -L if libdir is a "standard" location like /usr/lib
        flags="$flags -L$libdir -l${API_LIBNAME}"
    else
        ### this surely can't work since the library is in .libs?
        flags="$flags -L$API_BUILD_DIR -l${API_LIBNAME}"
    fi
    ;;
    --link-libtool)
    # If the LA_FILE exists where we think it should be, use it.  If we're
    # installed and the LA_FILE does not exist, assume to use -L/-l
    # (the LA_FILE may not have been installed).  If we're building ourselves,
    # we'll assume that at some point the .la file be created.
    if test -f "$LA_FILE"; then
        flags="$flags $LA_FILE"
    elif test "$location" = "installed"; then
        ### avoid using -L if libdir is a "standard" location like /usr/lib
        # Since the user is specifying they are linking with libtool, we
        # *know* that -R will be recognized by libtool.
        flags="$flags -L$libdir -R$libdir -l${API_LIBNAME}"
    else
        flags="$flags $LA_FILE"
    fi
    ;;
    --shlib-path-var)
    echo "$SHLIBPATH_VAR"
    exit 0
    ;;
    --api-la-file)
    if test -f "$LA_FILE"; then
        flags="$flags $LA_FILE"
    fi
    ;;
    --api-so-ext)
    echo "$API_SO_EXT"
    exit 0
    ;;
    --api-lib-target)
    echo "$API_LIB_TARGET"
    exit 0
    ;;
    --api-libtool)
    if test "$location" = "installed"; then
        echo "${installbuilddir}/libtool"
    else
        echo "$API_BUILD_DIR/libtool"
    fi
    exit 0
    ;;
    --help)
    show_usage
    exit 0
    ;;
    *)
    show_usage
    exit 1
    ;;
    esac

    # Next please.
    shift
done

if test -n "$flags"; then
  echo "$flags"
fi

exit 0
