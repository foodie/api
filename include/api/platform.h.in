#ifndef API_PLATFORM_H
#define API_PLATFORM_H

/* GENERATED FILE WARNING!  DO NOT EDIT platform.h
 *
 * You must modify platform.h.in instead.
 *
 * And please, make an effort to stub platform.hw and platform.hnw in the process.
 */

/**
 * @file platform.h
 * @brief API Platform Definitions
 * @remark This is a generated header generated from include/api/platform.h.in by
 * ./configure, or copied from include/api/platform.hw or include/api/platform.hnw 
 * for Win32 or Netware by those build environments, respectively.
 */

/**
 * @defgroup API MyMMSC Portability Runtime library
 * @{
 */
/**
 * @defgroup api_platform Platform Definitions
 * @{
 * @warning
 * <strong><em>The actual values of macros and typedefs on this page<br>
 * are platform specific and should NOT be relied upon!</em></strong>
 */

/* So that we can use inline on some critical functions, and use
 * GNUC attributes (such as to get -Wall warnings for printf-like
 * functions).  Only do this in gcc 2.7 or later ... it may work
 * on earlier stuff, but why chance it.
 *
 * We've since discovered that the gcc shipped with NeXT systems
 * as "cc" is completely broken.  It claims to be __GNUC__ and so
 * on, but it doesn't implement half of the things that __GNUC__
 * means.  In particular it's missing inline and the __attribute__
 * stuff.  So we hack around it.  PR#1613. -djg
 */
#if !defined(__GNUC__) || __GNUC__ < 2 || \
    (__GNUC__ == 2 && __GNUC_MINOR__ < 7) ||\
    defined(NEXT)
# ifndef __attribute__
#  define __attribute__(__x)
# endif
# define API_INLINE
# define API_HAS_INLINE          0
#else
# define API_INLINE __inline__
# define API_HAS_INLINE          1
#endif

#define API_HAVE_ARPA_INET_H     @arpa_ineth@
#define API_HAVE_CONIO_H         @conioh@
#define API_HAVE_CRYPT_H         @crypth@
#define API_HAVE_CTYPE_H         @ctypeh@
#define API_HAVE_DIRENT_H        @direnth@
#define API_HAVE_ERRNO_H         @errnoh@
#define API_HAVE_FCNTL_H         @fcntlh@
#define API_HAVE_IFADDRS_H       @ifaddrsh@
#define API_HAVE_IO_H            @ioh@
#define API_HAVE_LIMITS_H        @limitsh@
#define API_HAVE_MSWSOCK_H       @mswsockh@
#define API_HAVE_NETDB_H         @netdbh@
#define API_HAVE_NETINET_IN_H    @netinet_inh@
#define API_HAVE_NETINET_SCTP_H  @netinet_sctph@
#define API_HAVE_NETINET_SCTP_UIO_H @netinet_sctp_uioh@
#define API_HAVE_NETINET_TCP_H   @netinet_tcph@
#define API_HAVE_PROCESS_H       @processh@
#define API_HAVE_PTHREAD_H       @pthreadh@
#define API_HAVE_SEMAPHORE_H     @semaphoreh@
#define API_HAVE_SIGNAL_H        @signalh@
#define API_HAVE_STDARG_H        @stdargh@
#define API_HAVE_STDDEF_H        @stddefh@
#define API_HAVE_STDINT_H        @stdint@
#define API_HAVE_STDIO_H         @stdioh@
#define API_HAVE_STDLIB_H        @stdlibh@
#define API_HAVE_STRING_H        @stringh@
#define API_HAVE_STRINGS_H       @stringsh@
#define API_HAVE_SYS_IOCTL_H     @sys_ioctlh@
#define API_HAVE_SYS_SENDFILE_H  @sys_sendfileh@
#define API_HAVE_SYS_SIGNAL_H    @sys_signalh@
#define API_HAVE_SYS_SOCKET_H    @sys_socketh@
#define API_HAVE_SYS_SOCKIO_H    @sys_sockioh@
#define API_HAVE_SYS_SYSLIMITS_H @sys_syslimitsh@
#define API_HAVE_SYS_TIME_H      @sys_timeh@
#define API_HAVE_SYS_TYPES_H     @sys_typesh@
#define API_HAVE_SYS_UIO_H       @sys_uioh@
#define API_HAVE_SYS_UN_H        @sys_unh@
#define API_HAVE_SYS_WAIT_H      @sys_waith@
#define API_HAVE_TIME_H          @timeh@
#define API_HAVE_UNISTD_H        @unistdh@
#define API_HAVE_WINDOWS_H       @windowsh@
#define API_HAVE_WINSOCK2_H      @winsock2h@
#define API_HAVE_WS2TCPIP_H      @ws2tcpiph@

/** @} */
/** @} */

/* We don't include our conditional headers within the doxyblocks 
 * or the extern "C" namespace 
 */

#if API_HAVE_WINDOWS_H && defined(WIN32)
/* If windows.h was already included, our preferences don't matter.
 * If not, include a restricted set of windows headers to our tastes.
 */
# ifndef _WINDOWS_
#  ifndef WIN32_LEAN_AND_MEAN
#   define WIN32_LEAN_AND_MEAN
#  endif
#  ifndef _WIN32_WINNT
#   define _WIN32_WINNT 0x0501
#  endif
#  ifndef NOUSER
#   define NOUSER
#  endif
#  ifndef NOMCX
#   define NOMCX
#  endif
#  ifndef NOIME
#   define NOIME
#  endif

/* Impossible to include winsock2.h after winsock.h, while windows.h
 * attempts to load winsock.  Setting _WINSOCKAPI_ will dodge this.
 */
#  if API_HAVE_WINSOCK2_H
#   define _WINSOCKAPI_
#  endif
#  include <windows.h>
# endif /* ndef _WINDOWS_ */
#endif /* API_HAVE_WINDOWS_H */

#if API_HAVE_WINSOCK2_H
# include <winsock2.h>
# if API_HAVE_WS2TCPIP_H
#  include <ws2tcpip.h>
# endif
# if API_HAVE_MSWSOCK_H
#  include <mswsock.h>
# endif
#else /* !API_HAVE_WINSOCK2_H */
# if API_HAVE_WINSOCK_H
#  include <winsock.h>
# endif
#endif /* !API_HAVE_WINSOCK2_H */

#if API_HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif

#if API_HAVE_STDDEF_H
#include <stddef.h>
#endif

#if API_HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif

#if defined(__cplusplus) && !defined(__STDC_CONSTANT_MACROS)
/* C99 7.18.4 requires that stdint.h only exposes INT64_C 
 * and UINT64_C for C++ implementations if this is defined: */
# define __STDC_CONSTANT_MACROS
#endif

#if API_HAVE_STDINT_H
#include <stdint.h>
#endif

#if API_HAVE_SYS_WAIT_H
#include <sys/wait.h>
#endif

#ifdef OS2
#define INCL_DOS
#define INCL_DOSERRORS
#include <os2.h>
#endif

/* header files for PATH_MAX, _POSIX_PATH_MAX */
#if API_HAVE_LIMITS_H
# include <limits.h>
#else
# if API_HAVE_SYS_SYSLIMITS_H
#  include <sys/syslimits.h>
# endif
#endif

#if API_HAVE_STDIO_H
#include <stdio.h>
#endif

#if API_HAVE_STDLIB_H
#include <stdlib.h>
#endif

// for memset
#if API_HAVE_STRING_H
#include <string.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @addtogroup api_platform
 * @ingroup API 
 * @{
 */

#define API_HAVE_MEMWATCH       @have_memwatch@

/*  String Feature Macros */
#define API_HAVE_ASPRINTF       @have_asprintf@
#define API_HAVE_BCOPY          @have_bcopy@
#define API_HAVE_EXPLICIT_BZERO @have_explicit_bzero@
#define API_HAVE_SNPRINTF       @have_snprintf@
#define API_HAVE_STRERROR       @have_strerror@
#define API_HAVE_STRLCAT        @have_strlcat@
#define API_HAVE_STRLCPY        @have_strlcpy@
#define API_HAVE_STRMODE        @have_strmode@
#define API_HAVE_STRNLEN        @have_strnlen@
#define API_HAVE_STRNVIS        @have_strnvis@
#define API_HAVE_STRPTIME       @have_strptime@
#define API_HAVE_STRTONUM       @have_strtonum@
#define API_HAVE_STRTOLL        @have_strtoll@
#define API_HAVE_STRTOUL        @have_strtoul@
#define API_HAVE_STRTOULL       @have_strtoull@
#define API_HAVE_VASPRINTF      @have_vasprintf@
#define API_HAVE_VSNPRINTF      @have_vsnprintf@
#define API_HAVE_STRCASECMP     @have_strcasecmp@
#define API_HAVE_STRDUP         @have_strdup@
#define API_HAVE_STRICMP        @have_stricmp@
#define API_HAVE_STRNCASECMP    @have_strncasecmp@
#define API_HAVE_STRNICMP       @have_strnicmp@
#define API_HAVE_STRSTR         @have_strstr@
#define API_HAVE_MEMCHR         @have_memchr@

/* Thread Feature Macros */
#define API_HAVE_PTHREAD_YIELD  @have_pthread_yield@
#define API_HAVE_SCHED_H        @have_schedh@
#define API_HAVE_SCHED_YIELD    @have_sched_yield@

/* Time Feature Macros */
#define API_HAVE_CLOCK_GETTIME  @have_clock_gettime@
#define API_HAVE_NANOSLEEP      @have_nanosleep@

/* Share Memory Feature Macros */
#define API_HAVE_SHMEM_MMAP_TMP     @havemmaptmp@
#define API_HAVE_SHMEM_MMAP_SHM     @havemmapshm@
#define API_HAVE_SHMEM_MMAP_ZERO    @havemmapzero@
#define API_HAVE_SHMEM_SHMGET_ANON  @haveshmgetanon@
#define API_HAVE_SHMEM_SHMGET       @haveshmget@
#define API_HAVE_SHMEM_MMAP_ANON    @havemmapanon@
#define API_HAVE_SHMEM_BEOS         @havebeosarea@

#define API_USE_SHMEM_MMAP_TMP     @usemmaptmp@
#define API_USE_SHMEM_MMAP_SHM     @usemmapshm@
#define API_USE_SHMEM_MMAP_ZERO    @usemmapzero@
#define API_USE_SHMEM_SHMGET_ANON  @useshmgetanon@
#define API_USE_SHMEM_SHMGET       @useshmget@
#define API_USE_SHMEM_MMAP_ANON    @usemmapanon@
#define API_USE_SHMEM_BEOS         @usebeosarea@

#define API_HAVE_POSIX_MEMALIGN @have_posix_memalign@
#define API_HAVE_MEMALIGN       @have_memalign@

#define API_USE_FLOCK_SERIALIZE           @flockser@ 
#define API_USE_SYSVSEM_SERIALIZE         @sysvser@
#define API_USE_POSIXSEM_SERIALIZE        @posixser@
#define API_USE_FCNTL_SERIALIZE           @fcntlser@
#define API_USE_PROC_PTHREAD_SERIALIZE    @procpthreadser@ 
#define API_USE_PTHREAD_SERIALIZE         @pthreadser@ 

#define API_HAS_FLOCK_SERIALIZE           @hasflockser@
#define API_HAS_SYSVSEM_SERIALIZE         @hassysvser@
#define API_HAS_POSIXSEM_SERIALIZE        @hasposixser@
#define API_HAS_FCNTL_SERIALIZE           @hasfcntlser@
#define API_HAS_PROC_PTHREAD_SERIALIZE    @hasprocpthreadser@

#define API_PROCESS_LOCK_IS_GLOBAL        @proclockglobal@

#define API_HAVE_CORKABLE_TCP   @have_corkable_tcp@ 
#define API_HAVE_GETRLIMIT      @have_getrlimit@
#define API_HAVE_IN_ADDR        @have_in_addr@
#define API_HAVE_INET_ADDR      @have_inet_addr@
#define API_HAVE_INET_NETWORK   @have_inet_network@
#define API_HAVE_IPV6           @have_ipv6@
#define API_HAVE_SOCKADDR_UN    @have_sockaddr_un@
#define API_HAVE_MEMMOVE        @have_memmove@
#define API_HAVE_SETRLIMIT      @have_setrlimit@
#define API_HAVE_SIGACTION      @have_sigaction@
#define API_HAVE_SIGSUSPEND     @have_sigsuspend@
#define API_HAVE_SIGWAIT        @have_sigwait@
#define API_HAVE_SA_STORAGE     @have_sa_storage@
#define API_HAVE_STRUCT_RLIMIT  @struct_rlimit@
#define API_HAVE_UNION_SEMUN    @have_union_semun@
#define API_HAVE_SCTP           @have_sctp@
#define API_HAVE_IOVEC          @have_iovec@

/*  API Feature Macros */
#define API_HAS_SHARED_MEMORY     @sharedmem@
#define API_HAS_THREADS           @threads@
#define API_HAS_SENDFILE          @sendfile@
#define API_HAS_MMAP              @mmap@
#define API_HAS_FORK              @fork@
#define API_HAS_OTHER_CHILD       @oc@
#define API_HAS_DSO               @apidso@
#define API_HAS_SO_ACCEPTFILTER   @acceptfilter@
#define API_HAS_UNICODE_FS        @have_unicode_fs@
#define API_HAS_PROC_INVOKED      @have_proc_invoked@
#define API_HAS_USER              @api_has_user@
#define API_HAS_LARGE_FILES       @apilfs@
#define API_HAS_XTHREAD_FILES     @api_has_xthread_files@

#define API_PROCATTR_USER_SET_REQUIRES_PASSWORD @api_procattr_user_set_requires_password@

/* API sets API_FILES_AS_SOCKETS to 1 on systems where it is possible
 * to poll on files/pipes.
 */
#define API_FILES_AS_SOCKETS      @file_as_socket@

/* This macro indicates whether or not EBCDIC is the native character set.
 */
#define API_CHARSET_EBCDIC        @api_charset_ebcdic@

/* If we have a TCP implementation that can be "corked", what flag
 * do we use?
 */
#define API_TCP_NOPUSH_FLAG       @api_tcp_nopush_flag@

/* Is the TCP_NODELAY socket option inherited from listening sockets?
*/
#define API_TCP_NODELAY_INHERITED @tcp_nodelay_inherited@

/* Is the O_NONBLOCK flag inherited from listening sockets?
*/
#define API_O_NONBLOCK_INHERITED @o_nonblock_inherited@

typedef  unsigned char           api_byte_t;
typedef  signed char             api_int8_t;
typedef  unsigned char           api_uint8_t;

typedef  @short_value@           api_int16_t;
typedef  unsigned @short_value@  api_uint16_t;

typedef  @int_value@             api_int32_t;
typedef  unsigned @int_value@    api_uint32_t;

#define API_SIZEOF_VOIDP @voidp_size@

/*
 * Darwin 10's default compiler (gcc42) builds for both 64 and
 * 32 bit architectures unless specifically told not to.
 * In those cases, we need to override types depending on how
 * we're being built at compile time.
 * NOTE: This is an ugly work-around for Darwin's
 * concept of universal binaries, a single package
 * (executable, lib, etc...) which contains both 32
 * and 64 bit versions. The issue is that if API is
 * built universally, if something else is compiled
 * against it, some bit sizes will depend on whether
 * it is 32 or 64 bit. This is determined by the __LP64__
 * flag. Since we need to support both, we have to
 * handle OS X unqiuely.
 */
#ifdef DARWIN_10
#undef API_SIZEOF_VOIDP
#undef INT64_C
#undef UINT64_C
#ifdef __LP64__
 typedef  long            api_int64_t;
 typedef  unsigned long   api_uint64_t;
 #define API_SIZEOF_VOIDP     8
 #define INT64_C(v)   (v ## L)
 #define UINT64_C(v)  (v ## UL)
#else
 typedef  long long            api_int64_t;
 typedef  unsigned long long   api_uint64_t;
 #define API_SIZEOF_VOIDP     4
 #define INT64_C(v)   (v ## LL)
 #define UINT64_C(v)  (v ## ULL)
#endif
#else
 typedef  @long_value@            api_int64_t;
 typedef  unsigned @long_value@   api_uint64_t;
#endif

typedef  @size_t_value@          api_size_t;
typedef  @ssize_t_value@         api_ssize_t;
typedef  @off_t_value@           api_off_t;
typedef  @socklen_t_value@       api_socklen_t;
typedef  @ino_t_value@           api_ino_t;

#if API_SIZEOF_VOIDP == 8
typedef  api_uint64_t            api_uintptr_t;
typedef  api_int64_t             api_intptr_t;
#else
typedef  api_uint32_t            api_uintptr_t;
typedef  api_int32_t             api_intptr_t;
#endif

/* Are we big endian? */
#define API_IS_BIGENDIAN        @bigendian@

/* Mechanisms to properly type numeric literals */
@int64_literal@
@uint64_literal@

#ifdef INT16_MIN
#define API_INT16_MIN   INT16_MIN
#else
#define API_INT16_MIN   (-0x7fff - 1)
#endif

#ifdef INT16_MAX
#define API_INT16_MAX  INT16_MAX
#else
#define API_INT16_MAX   (0x7fff)
#endif

#ifdef UINT16_MAX
#define API_UINT16_MAX  UINT16_MAX
#else
#define API_UINT16_MAX  (0xffff)
#endif

#ifdef INT32_MIN
#define API_INT32_MIN   INT32_MIN
#else
#define API_INT32_MIN   (-0x7fffffff - 1)
#endif

#ifdef INT32_MAX
#define API_INT32_MAX  INT32_MAX
#else
#define API_INT32_MAX  0x7fffffff
#endif

#ifdef UINT32_MAX
#define API_UINT32_MAX  UINT32_MAX
#else
#define API_UINT32_MAX  (0xffffffffU)
#endif

#ifdef INT64_MIN
#define API_INT64_MIN   INT64_MIN
#else
#define API_INT64_MIN   (API_INT64_C(-0x7fffffffffffffff) - 1)
#endif

#ifdef INT64_MAX
#define API_INT64_MAX   INT64_MAX
#else
#define API_INT64_MAX   API_INT64_C(0x7fffffffffffffff)
#endif

#ifdef UINT64_MAX
#define API_UINT64_MAX  UINT64_MAX
#else
#define API_UINT64_MAX  API_UINT64_C(0xffffffffffffffff)
#endif

#define API_SIZE_MAX    (~((api_size_t)0))

/** 
 * Thread callbacks from API functions must be declared with API_THREAD_FUNC, 
 * so that they follow the platform's calling convention.
 * <PRE>
 *
 * void* API_THREAD_FUNC my_thread_entry_fn(api_thread_t *thd, void *data);
 *
 * </PRE>
 */
#define API_THREAD_FUNC       @api_thread_func@

/* Define API_SSIZE_T_FMT.  
 * If ssize_t is an integer we define it to be "d",
 * if ssize_t is a long int we define it to be "ld",
 * if ssize_t is neither we declare an error here.
 * I looked for a better way to define this here, but couldn't find one, so
 * to find the logic for this definition search for "ssize_t_fmt" in
 * configure.in.
 */

@ssize_t_fmt@

/* And API_SIZE_T_FMT */
@size_t_fmt@

/* And API_OFF_T_FMT */
@off_t_fmt@

/* And API_PID_T_FMT */
@pid_t_fmt@

/* And API_INT64_T_FMT */
@int64_t_fmt@

/* And API_UINT64_T_FMT */
@uint64_t_fmt@

/* And API_UINT64_T_HEX_FMT */
@uint64_t_hex_fmt@

/*
 * Ensure we work with universal binaries on Darwin
 */
#ifdef DARWIN_10

#undef API_HAS_LARGE_FILES
#undef API_SIZEOF_VOIDP
#undef API_INT64_T_FMT
#undef API_UINT64_T_FMT
#undef API_UINT64_T_HEX_FMT

#ifdef __LP64__
 #define API_HAS_LARGE_FILES  0
 #define API_SIZEOF_VOIDP     8
 #define API_INT64_T_FMT      "ld"
 #define API_UINT64_T_FMT     "lu"
 #define API_UINT64_T_HEX_FMT "lx"
#else
 #define API_HAS_LARGE_FILES  1
 #define API_SIZEOF_VOIDP     4
 #define API_INT64_T_FMT      "lld"
 #define API_UINT64_T_FMT     "llu"
 #define API_UINT64_T_HEX_FMT "llx"
#endif

#undef API_IS_BIGENDIAN
#ifdef __BIG_ENDIAN__
 #define API_IS_BIGENDIAN       1
#else
 #define API_IS_BIGENDIAN       0
#endif

#undef API_OFF_T_FMT
#define API_OFF_T_FMT "lld"

#endif /* DARWIN_10 */

/* Does the proc mutex lock threads too */
#define API_PROC_MUTEX_IS_GLOBAL      @proc_mutex_is_global@

/* Local machine definition for console and log output. */
#define API_EOL_STR              "@eolstr@"

#if API_HAVE_SYS_WAIT_H
#ifdef WEXITSTATUS
#define api_wait_t       int
#else
#define api_wait_t       union wait
#define WEXITSTATUS(status)    (int)((status).w_retcode)
#define WTERMSIG(status)       (int)((status).w_termsig)
#endif /* !WEXITSTATUS */
#elif defined(__MINGW32__)
typedef int api_wait_t;
#endif /* HAVE_SYS_WAIT_H */

#if defined(PATH_MAX)
#define API_PATH_MAX       PATH_MAX
#elif defined(_POSIX_PATH_MAX)
#define API_PATH_MAX       _POSIX_PATH_MAX
#else
#error no decision has been made on API_PATH_MAX for your platform
#endif

//#define API_DSOPATH "@shlibpath_var@"

/** @} */

#define API_HAVE_ICONV         @have_iconv@

/* Definitions that only Win32 programs need to compile properly. */

/* XXX These simply don't belong here, perhaps in api_portable.h
 * based on some API_HAVE_PID/GID/UID?
 */
#ifdef WIN32
#ifndef __GNUC__
typedef  int         pid_t;
#endif
typedef  int         uid_t;
typedef  int         gid_t;
#endif

#ifdef __cplusplus
}
#endif

#endif /* ! API_PLATFORM_H */

